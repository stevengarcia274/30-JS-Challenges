html {
  box-sizing: border-box;
  background: url("oh-la-la.jpeg") center no-repeat;
  background-size: cover;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  font-family: Futura, "Trebuchet MS", Arial, sans-serif;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

svg {
  fill: white;
  background: rgba(0, 0, 0, 0.1);
  padding: 20px;
  border-radius: 50%;
  width: 200px;
  margin-bottom: 50px;
}

.wrapper {
  padding: 20px;
  max-width: 350px;
  background: rgba(255, 255, 255, 0.95);
  box-shadow: 0 0 0 10px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
  margin: 0;
  font-weight: 200;
}

.plates {
  margin: 0;
  padding: 0;
  text-align: left;
  list-style: none;
}

.plates li {
  border-bottom: 1px solid rgba(0, 0, 0, 0.2);
  padding: 10px 0;
  font-weight: 100;
  display: flex;
}

.plates label {
  flex: 1;
  cursor: pointer;
}

.plates input {
  display: none;
}

.plates input + label:before {
  content: "⬜️";
  margin-right: 10px;
}

.plates input:checked + label:before {
  content: "🌮";
}

.add-items {
  margin-top: 20px;
}

.add-items input {
  padding: 10px;
  outline: 0;
  border: 1px solid rgba(0, 0, 0, 0.1);
}

//form where we enter new item
      const addItems = document.querySelector(".add-items");
      //where we display the items once entered
      const itemsList = document.querySelector(".plates");

      /* Storing all our data in an arr of objs...check if anything is
      stored in local stroage on page load. If there is, render it on the
      page */
      const items = JSON.parse(localStorage.getItem("items")) || [];

      function addItem(e) {
        e.preventDefault();
        const text = this.querySelector("[name=item]").value;
        const item = {
          text,
          done: false,
        };

        items.push(item);

        /* console.table(items); */

        //'this' is the form element and form elements have a method called reset
        populateList(items, itemsList);
        localStorage.setItem("items", JSON.stringify(items));
        this.reset();
      }

      function toggleDone(e) {
        if (!e.target.matches("input")) return; //skip unless it's an input
        const el = e.target;
        const index = el.dataset.index;

        items[index].done = !items[index].done;

        localStorage.setItem("items", JSON.stringify(items));
        populateList(items, itemsList);

        /*  MY VERSION
          if (e.target.tagName === "LABEL") {
            const dataIndex = e.target.previousElementSibling.dataset.index;
            items[dataIndex].done = !items[dataIndex].done;
            localStorage.setItem("items", JSON.stringify(items));
          } 
        */
      }

      /* Fnc to make the HTML of our plates. Needs two things,
      list of our plates(items) and place to dump our HTML*/

      /* default items to an empty obj, so if we forget to pass
      through anything it doesn't break on us*/
      function populateList(items = [], platesList) {
        platesList.innerHTML = items
          .map((item, i) => {
            return `
            <li>
                <input 
                    type="checkbox" 
                    data-index=${i} 
                    id="item${i}" 
                    ${item.done ? "checked" : ""}
                />
                <label for="item${i}">${item.text}</label>
            </li>
          `;
          })
          .join("");
      }

      /* want to listen for all kinds of submits, not just
      the click of our submit button */
      addItems.addEventListener("submit", addItem);
      itemsList.addEventListener("click", toggleDone);
      populateList(items, itemsList);
